# -*- coding: utf-8 -*-
"""U_Net_Heart Segmentation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/u-net-heart-segmentation-3ba64514-6868-44b3-980f-6cd0be15a190.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241111/auto/storage/goog4_request%26X-Goog-Date%3D20241111T191338Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4781369064eaba204c34f3f973f9947491922035c48be300db676c40d9358540e28813d46f11c98bfef1906c3f53b5278dbf501b1dcbf3989d132942d8ccc4b62ccf4aa100cbc8a6b067947728c41fa07fc54cbf64f2c8ab9d1d2c8baaebe12480ae97f7934d4b817a529558cc8af725a1dcf7ab88290bd3d4cc3b5691b7986d54c206cfe6a669ebf1a3796b74d3aa7578417aaaa10653ba0a29ef724fbcb7220502c32c73932106843e8d00eba892be07a1344c56456948fc2d3fc796213c68bb11a7fd201ea7f52ad85f28c929b3e5a7185e5b21033d6134700af29653c488e5ad21fbb691edcf1c06616d4beae881f93a054ed739e45baf60f760efd9fa13
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
nikhilroxtomar_ct_heart_segmentation_path = kagglehub.dataset_download('nikhilroxtomar/ct-heart-segmentation')

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import numpy as np
import tensorflow as tf
import os
import cv2
import glob as gb
from tqdm import tqdm
import random
from skimage.io import imread, imshow
from skimage.transform import resize
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Conv2D , MaxPooling2D ,concatenate ,Input , BatchNormalization, Dropout ,Conv2DTranspose

IMG_WIDTH = 256
IMG_HEIGHT = 256
IMG_CHANNELS = 1

def augment(input_image, input_mask):
    if tf.random.uniform(()) > 0.5:
       # Random flipping of the image and mask
        input_image = tf.image.flip_left_right(input_image)
        input_mask = tf.image.flip_left_right(input_mask)

    return input_image, input_mask

def normalize(input_image, input_mask):
    input_image = input_image / 255.0
    input_mask = input_mask / 255.0
    return input_image, input_mask

def load_data(train_dir):
    X=[]
    Y=[]

    for folder in tqdm(os.listdir(train_dir)):
        folder_path = os.path.join(train_dir, folder)

        if not os.path.isdir(folder_path):
            continue

        # Load images
        image_files = sorted(gb.glob(os.path.join(folder_path, 'image', '*.png')))
        for file in image_files:
            img = cv2.imread(file, cv2.IMREAD_GRAYSCALE)
            if img is None:
                print(f"Warning: Unable to load image {file}")
                continue
            img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH))
            X.append(img)

        # Load masks
        mask_files = sorted(gb.glob(os.path.join(folder_path, 'mask', '*.png')))
        for file in mask_files:
            img = cv2.imread(file, cv2.IMREAD_GRAYSCALE)
            if img is None:
                print(f"Warning: Unable to load mask {file}")
                continue
            img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH))
            Y.append(img)
    X = np.array(X)
    Y = np.array(Y)
    X,Y = normalize(X,Y)

    # Split the data
    x_train, x_valid, y_train, y_valid = train_test_split(X, Y, test_size= int(len(X)*0.2), random_state=42 , shuffle = True)
    x_train, y_train = augment(x_train, y_train)

    return  x_train, x_valid, y_train, y_valid

x_train, x_valid, y_train, y_valid = load_data('/kaggle/input/ct-heart-segmentation/data/train')

#X= load_data('/kaggle/input/ct-heart-segmentation/data/train')
#y= load_data('/kaggle/input/ct-heart-segmentation/data/test')

plt.figure(figsize=(20,20))
for n ,i in enumerate(list(np.random.randint(0,len(x_train),16))) :
    plt.subplot(4,4,n+1)
    plt.imshow(x_train[i],cmap='gray')
    plt.axis('off')
    plt.title(i)

num_classes = 1

inputs = tf.keras.layers.Input((IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))

#Contraction path
c1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(inputs)
c1 = tf.keras.layers.Dropout(0.1)(c1)
c1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c1)
b1 = tf.keras.layers.BatchNormalization()(c1)
r1 = tf.keras.layers.ReLU()(b1)
p1 = tf.keras.layers.MaxPooling2D((2, 2))(r1)

c2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p1)
c2 = tf.keras.layers.Dropout(0.1)(c2)
c2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c2)
b2 = tf.keras.layers.BatchNormalization()(c2)
r2 = tf.keras.layers.ReLU()(b2)
p2 = tf.keras.layers.MaxPooling2D((2, 2))(r2)

c3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p2)
c3 = tf.keras.layers.Dropout(0.2)(c3)
c3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c3)
b3 = tf.keras.layers.BatchNormalization()(c3)
r3 = tf.keras.layers.ReLU()(b3)
p3 = tf.keras.layers.MaxPooling2D((2, 2))(r3)

c4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p3)
c4 = tf.keras.layers.Dropout(0.2)(c4)
c4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c4)
b4 = tf.keras.layers.BatchNormalization()(c4)
r4 = tf.keras.layers.ReLU()(b4)
p4 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(r4)

c5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p4)
b5 = tf.keras.layers.BatchNormalization()(c5)
r5 = tf.keras.layers.ReLU()(b5)
c5 = tf.keras.layers.Dropout(0.3)(r5)
c5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c5)

#Expansive path
u6 = tf.keras.layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(c5)
u6 = tf.keras.layers.concatenate([u6, c4])
u6 = tf.keras.layers.BatchNormalization()(u6)
u6 = tf.keras.layers.ReLU()(u6)


u7 = tf.keras.layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(u6)
u7 = tf.keras.layers.concatenate([u7, c3])
u7 = tf.keras.layers.BatchNormalization()(u7)
u7 = tf.keras.layers.ReLU()(u7)


u8 = tf.keras.layers.Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(u7)
u8 = tf.keras.layers.concatenate([u8, c2])
u8 = tf.keras.layers.BatchNormalization()(u8)
u8 = tf.keras.layers.ReLU()(u8)

u9 = tf.keras.layers.Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same')(u8)
u9 = tf.keras.layers.concatenate([u9, c1], axis=3)
u9 = tf.keras.layers.BatchNormalization()(u9)
u9 = tf.keras.layers.ReLU()(u9)


outputs = tf.keras.layers.Conv2D(num_classes, (1, 1), activation='sigmoid')(u9)

model = tf.keras.Model(inputs=[inputs], outputs=[outputs])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

callbacks = [
        tf.keras.callbacks.EarlyStopping(patience=2, monitor='val_loss'),
        tf.keras.callbacks.TensorBoard(log_dir='logs')]

model.fit(x_train, y_train, batch_size=16, epochs=25, callbacks=callbacks)

from sklearn.metrics import accuracy_score, f1_score, jaccard_score, precision_score, recall_score

H = 256
W = 256

# Load the dataset
test_x = x_valid
test_y = y_valid

# Randomly select 5 indices without fixing the seed
random_indices = np.random.choice(len(test_x), size=5, replace=False)

SCORE = []
examples = []  # To store example images for display

for idx in tqdm(random_indices):
    x = test_x[idx]  # Get the selected image
    y = test_y[idx]  # Get the corresponding mask

    image = x  # x is already the image (normalized)
    x = np.expand_dims(image, axis=0)  # Add batch dimension

    # Ensure the mask is binary
    mask = (y > 0.5).astype(np.int32)

    # Prediction
    y_pred = model.predict(x)[0]
    y_pred = np.squeeze(y_pred, axis=-1)
    y_pred = (y_pred > 0.5).astype(np.int32)  # Convert to binary

    # Store the image, mask, and prediction for display
    examples.append((image, mask, y_pred))

    # Flatten the arrays for metrics
    y_flat = mask.flatten()
    y_pred_flat = y_pred.flatten()

    # Calculating the metrics values
    acc_value = accuracy_score(y_flat, y_pred_flat)
    f1_value = f1_score(y_flat, y_pred_flat, labels=[0, 1], average="binary", zero_division=1)
    jac_value = jaccard_score(y_flat, y_pred_flat, labels=[0, 1], average="binary", zero_division=1)
    recall_value = recall_score(y_flat, y_pred_flat, labels=[0, 1], average="binary", zero_division=1)
    precision_value = precision_score(y_flat, y_pred_flat, labels=[0, 1], average="binary", zero_division=1)

    SCORE.append([f"Image {idx + 1}", acc_value, f1_value, jac_value, recall_value, precision_value])

# Print all SCORE values
for score in SCORE:
    print(f"{score[0]} - Acc: {score[1]:.2f}, F1: {score[2]:.2f}, Jaccard: {score[3]:.2f}, Recall: {score[4]:.2f}, Precision: {score[5]:.2f}")

# Plotting the results
plt.figure(figsize=(10, 10))
for i, (img, mask, pred) in enumerate(examples):
    plt.subplot(5, 3, i * 3 + 1)
    plt.imshow(img.squeeze(), cmap='gray')
    plt.title(f'Original Image')
    plt.axis('off')

    plt.subplot(5, 3, i * 3 + 2)
    plt.imshow(mask, cmap='gray')
    plt.title('Ground Truth Mask')
    plt.axis('off')

    plt.subplot(5, 3, i * 3 + 3)
    plt.imshow(pred, cmap='gray')
    plt.title('Predicted Mask')
    plt.axis('off')

plt.tight_layout()
plt.show()